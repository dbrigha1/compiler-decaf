/* vim: ft=lex
program2.lpp
Dylan Brigham
Dr. Buckner
9/24/2017*/

%option outfile = "program_lex.cpp"
%option noyywrap
%option yylineno
%{
//#include "program.h"
#include "node.hpp"
#include "program.tab.h"
#include <iostream>

void yyerror(const char *string)
{
  std::cerr << string << endl;
  return;
}
%}


SPACE       [ ]+                                                              
TAB         [\t]+                                                            
PUNCTUATION "."|","|"?"|";"|"\""|"\'"|"\("|"\)"|"\["|"\]"|"\{"|"\}"
RELATIONOP  "=="|"!="|"<="|">="|"<"|">"
SUMOP       "+"|"\-"|"||" 
PRODUCTOP   "*"|"/"|"%"|"&&"
UNARYOP     "+"|"\-"|"\!"                           
OPERATOR    "+"|"\-"|"*"|"/"|"%"|"="|"~"                                              
INTEGER     [1-9][0-9]*                                                      
FLOAT       [0-9]+\.[0-9]+ 
SCIENTIFIC  {FLOAT}[eE][+\-]?{INTEGER}
KEYWORD  "int"|"print"|"if"|"void"|"read"|"else"|"class"|"return"|"this"|"new"|"while" 
IDENTIFIER  [_]+?[a-zA-Z][_a-zA-Z0-9]*                                       
NEWLINE     [\n]                                                            
UNKNOWN     .                                                              

%x COMMENT BLOCK_COMMENT ERROR ERROR_WORD
%%

"//"                                      {yyless(0); BEGIN(COMMENT);}
<COMMENT>[^\n]+                           {;} 
<COMMENT>[\n]                             {BEGIN(INITIAL);}


"/*"                                     {BEGIN(BLOCK_COMMENT); yyless(0);}
<BLOCK_COMMENT>[\n]                      {/*Token::_column = 0*/;}
<BLOCK_COMMENT>"*/"                      {BEGIN(INITIAL);}
<BLOCK_COMMENT>.                         {;}


<ERROR>{UNKNOWN}{OPERATOR}|{UNKNOWN}{SPACE}|{UNKNOWN}{TAB}|{UNKNOWN} {BEGIN(INITIAL); yyless(1); return SINGLE_ERROR;}

<ERROR>{UNKNOWN}{IDENTIFIER}*                                        {BEGIN(ERROR_WORD); return WORD_ERROR;}

 /*<ERROR_WORD>{PUNCTUATION}|{OPERATOR}|{SPACE}|{TAB}|{NEWLINE}
 * {BEGIN(INITIAL); yyless(0);} */
<ERROR_WORD>[^{IDENTIFIER}]         {BEGIN(INITIAL); yyless(0);}


{SPACE}       {/*Token::_column++*/;} 
{TAB}         {/*Token::_column++*/;}
{PUNCTUATION} {return PUNCTUATION;}
{RELATIONOP}  {return RELATIONOP;}
{SUMOP}       {return SUMOP;}
{PRODUCTOP}   {return PRODUCTOP;}
{UNARYOP}     {return UNARYOP;}
{OPERATOR}    {return OPERATOR;}
{INTEGER}     {yylval.ttype = new Node; yylval.ttype->setval(atoi(yytext)); return INTEGER;}
{FLOAT}       {return FLOAT;}
{SCIENTIFIC}  {return SCIENTIFIC;}
{KEYWORD}     {return KEYWORD;}
{IDENTIFIER}  {return IDENTIFIER;}
{NEWLINE}     {/*Token::_column = 1*/;}
{UNKNOWN}     {BEGIN(ERROR); yyless(0);}

%%
//user entry
