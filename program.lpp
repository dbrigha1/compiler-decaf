/* vim: ft=lex
program.lpp
Dylan Brigham
Dr. Buckner
10/20/2017
HMK03
*/

%option outfile = "program_lex.cpp"
%option noyywrap
%option yylineno
%{
//#include "program.h"
#include "node.hpp"
#include "scope.h"
#include "program.tab.h"
#include <iostream>
using std::cout;
using std::endl;
extern unsigned int column;

void yyerror(const char *string)
{  if(strcmp(string, "syntax error"))
    std::cerr << string << endl;
  return;
}
%}


SPACE       [ ]+                                                              
TAB         [\t]+                                                            
INTEGER     [0-9][0-9]*
OPERATOR    "+"|"\-"|"*"|"/"|"%"|"="|"~"                                                       
FLOAT       [0-9]+\.[0-9]+ 
SCIENTIFIC  {FLOAT}[eE][+\-]?{INTEGER}
IDENTIFIER  [_]+?[a-zA-Z][_a-zA-Z0-9]*                                       
NEWLINE     [\n]                                                            
UNKNOWN     .                                                              

%x COMMENT BLOCK_COMMENT ERROR ERROR_WORD
%%

"//"                                      {yyless(0); BEGIN(COMMENT);}
<COMMENT>[^\n]+                           {;} 
<COMMENT>[\n]                             {BEGIN(INITIAL);}

"/*"                                     {BEGIN(BLOCK_COMMENT); yyless(0);}
<BLOCK_COMMENT>[\n]                      {column = 0;}
<BLOCK_COMMENT>"*/"                      {BEGIN(INITIAL);}
<BLOCK_COMMENT>.                         {;}

<ERROR>{UNKNOWN}{OPERATOR}|{UNKNOWN}{SPACE}|{UNKNOWN}{TAB}|{UNKNOWN} {BEGIN(INITIAL); yyless(1); column+=yyleng; cout <<"character error: " << yylineno << ": " << column << endl;}

<ERROR>{UNKNOWN}{IDENTIFIER}*    {BEGIN(ERROR_WORD); column+=yyleng; cout <<"word error: " << yylineno << ": " << column << endl; }

<ERROR_WORD>[^{IDENTIFIER}]         {BEGIN(INITIAL); yyless(0);}


"+"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("+"); return PLUS;}
"-"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("-"); return MINUS;}
"!"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("!"); return NOT;}
"==" {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("=="); return COMPARE_EQUAL;}
"!=" {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("!="); return COMPARE_NOTEQUAL;}
"<=" {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("<="); return LESSOREQUAL;}
">=" {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval(">="); return GREATEROREQUAL;}
"<"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("<"); return LESSTHAN;}
">"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval(">"); return GREATERTHAN;}
"||" {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("||"); return COMPARE_OR;}
"*"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("*"); return TIMES;}
"/"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("/"); return DIV;}
"%"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("%"); return MOD;}
"&&" {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("&&"); return COMPARE_AND;}
","  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval(","); return COMMA;}
"class"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("class"); return CLASS;}
"{"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("{"); return LBRACE;}
"}"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("}"); return RBRACE;}
"void"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("void"); return VOID;}
"="  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("="); return EQUALS;}
"print"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("print"); return PRINT;}
"["  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("["); return LBR;}
"]"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("]"); return RBR;}
"("  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("(");  return LPAREN;}
")"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval(")");  return RPAREN;}
";"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval(";");  return SEMI;}
"."  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval(".");  return DOT;}
"int"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("int"); return INT;}
"this" {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("this"); return THIS;}
"if"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("if"); return IF;}
"else"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("else"); return ELSE;}
"while"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("while"); return WHILE;}
"return"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("return"); return RETURN;}
"new"  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("new"); return NEW;}
"read" {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("read"); return READ;}
"null" {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval("null"); return NLL;}

{SPACE}       {column+=yyleng;} 
{TAB}         {column+=yyleng;}
{INTEGER}     {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval(yytext); return INTEGER;}
{FLOAT}       {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval(yytext); return FLOAT;}
{SCIENTIFIC}  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval(yytext); return SCIENTIFIC;}
{IDENTIFIER}  {column+=yyleng; yylval.ttype = new Node; yylval.ttype->setval(yytext); return IDENTIFIER;}
{NEWLINE}     {column =0;}
{UNKNOWN}     {BEGIN(ERROR); yyless(0);}
%%
//user entry
